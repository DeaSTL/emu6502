#pragma once
namespace emuops{
  enum {
    IN_LDA_IMM = 0xa9,
    IN_LDA_ZPG = 0xa5,
    IN_LDA_ZPG_X = 0xb5,
    IN_LDA_ABS = 0xad,
    IN_LDA_ABS_X = 0xbd,
    IN_LDA_ABS_Y = 0xb9,
    IN_LDA_IND_X = 0xa1,
    IN_LDA_IND_Y = 0xb1,
    IN_LDX_IMM = 0xa2,
    IN_LDX_ZPG = 0xa6,
    IN_LDX_ZPG_Y = 0xb6,
    IN_LDX_ABS = 0xae,
    IN_LDX_ABS_Y = 0xbe,
    IN_LDY_IMM = 0xa0,
    IN_LDY_ZPG = 0xa4,
    IN_LDY_ZPG_X = 0xb4,
    IN_LDY_ABS = 0xac,
    IN_LDY_ABS_X = 0xbc,
    IN_STA_ZPG = 0x85,
    IN_STA_ZPG_X = 0x95,
    IN_STA_ABS = 0x8d,
    IN_STA_ABS_X = 0x9d,
    IN_STA_ABS_Y = 0x99,
    IN_STA_IND_X = 0x81,
    IN_STA_IND_Y = 0x91,
    IN_STX_ZPG = 0x86, 
    IN_STX_ZPG_Y = 0x96,
    IN_STX_ABS = 0x8e,
    IN_STY_ZPG = 0x84,
    IN_STY_ZPG_X = 0x94,
    IN_STY_ABS = 0x8c,
    IN_TAX = 0xaa,
    IN_TAY = 0xa8,
    IN_TSX = 0xba,
    IN_TXA = 0x8a,
    IN_TXS = 0x9a,
    IN_TYA = 0x98,
    IN_ADC_IMM = 0x69,
    IN_ADC_ZPG = 0x65,
    IN_ADC_ZPG_X = 0x75,
    IN_ADC_ABS = 0x6d,
    IN_ADC_ABS_X = 0x7d,
    IN_ADC_ABS_Y = 0x79,
    IN_ADC_IND_X = 0x61,
    IN_ADC_IND_Y = 0x71,
    IN_SBC_IMM = 0xe9,
    IN_SBC_ZPG = 0xe5,
    IN_SBC_ZPG_X = 0xf5,
    IN_SBC_ABS = 0xed,
    IN_SBC_ABS_X = 0xfd,
    IN_SBC_ABS_Y = 0xf9,
    IN_SBC_IND_X = 0xe1,
    IN_SBC_IND_Y = 0xf1,
    IN_INC_ZPG = 0xe6,
    IN_INC_ZPG_X = 0xf6,
    IN_INC_ABS = 0xee,
    IN_INC_ABS_X = 0xfe,
    IN_INX = 0xe8,
    IN_INY = 0xc8,
    IN_DEC_ZPG = 0xc6,
    IN_DEC_ZPG_X = 0xd6,
    IN_DEC_ABS = 0xce,
    IN_DEC_ABS_X = 0xde,
    IN_DEX = 0xca,
    IN_DEY = 0x88,
    IN_AND_IMM = 0x29,
    IN_AND_ZPG = 0x25,
    IN_AND_ZPG_X = 0x35,
    IN_AND_ABS = 0x2d,
    IN_AND_ABS_X = 0x3d,
    IN_AND_ABS_Y = 0x39,
    IN_AND_IND_X = 0x21,
    IN_AND_IND_Y = 0x31,
    IN_ORA_IMM = 0x09,
    IN_ORA_ZPG = 0x05,
    IN_ORA_ZPG_X = 0x15,
    IN_ORA_ABS = 0x0d,
    IN_ORA_ABS_X = 0x1d,
    IN_ORA_ABS_Y = 0x19,
    IN_ORA_IND_X = 0x01,
    IN_ORA_IND_Y = 0x11,
    IN_EOR_IMM = 0x49,
    IN_EOR_ZPG = 0x45,
    IN_EOR_ZPG_X = 0x55,
    IN_EOR_ABS = 0x4d,
    IN_EOR_ABS_X = 0x5d,
    IN_EOR_ABS_Y = 0x59,
    IN_EOR_IND_X = 0x41,
    IN_EOR_IND_Y = 0x51,
    IN_CMP_IMM = 0xc9,
    IN_CMP_ZPG = 0xc5,
    IN_CMP_ZPG_X = 0xd5,
    IN_CMP_ABS = 0xcd,
    IN_CMP_ABS_X = 0xdd,
    IN_CMP_ABS_Y = 0xd9,
    IN_CMP_IND_X = 0xc1,
    IN_CMP_IND_Y = 0xd1,
    IN_CPX_IMM = 0xe0,
    IN_CPX_ZPG = 0xe4,
    IN_CPX_ABS = 0xec,
    IN_CPY_IMM = 0xc0,
    IN_CPY_ZPG = 0xc4,
    IN_CPY_ABS = 0xcc,
    IN_BIT_ZPG = 0x24,
    IN_BIT_ABS = 0x2c,
    IN_ASL_ACC = 0x0a,
    IN_ASL_ZPG = 0x06,
    IN_ASL_ZPG_X = 0x16,
    IN_ASL_ABS = 0x0e,
    IN_ASL_ABS_X = 0x1e,
    IN_LSR_ACC = 0x4a,
    IN_LSR_ZPG = 0x46,
    IN_LSR_ZPG_X = 0x56,
    IN_LSR_ABS = 0x4e,
    IN_LSR_ABS_X = 0x5e,
    IN_ROL_ACC = 0x2a,
    IN_ROL_ZPG = 0x26,
    IN_ROL_ZPG_X = 0x36,
    IN_ROL_ABS = 0x2e,
    IN_ROL_ABS_X = 0x3e,
    IN_ROR_ACC = 0x6a,
    IN_ROR_ZPG = 0x66,
    IN_ROR_ZPG_X = 0x76,
    IN_ROR_ABS = 0x6e,
    IN_ROR_ABS_X = 0x7e,
    IN_JMP_ABS = 0x4c,
    IN_JMP_IND = 0x6c, // Jump Indirect
    IN_JSR = 0x20, // Jump to Subroutine
    IN_RTS = 0x60, // Return from Subroutine
    IN_RTI = 0x40, // Return from Interrupt
    IN_BRK = 0x00, // Break
    IN_BPL = 0x10, // Branch if Positive
    IN_BMI = 0x30, // Branch if Minus
    IN_BVC = 0x50, // Branch if Overflow Clear
    IN_BVS = 0x70, // Branch if Overflow Set
    IN_BCC = 0x90, // Branch if Carry Clear
    IN_BCS = 0xb0, // Branch if Carry Set
    IN_BNE = 0xd0, // Branch if Not Equal
    IN_BEQ = 0xf0, // Branch if Equal
    IN_CLC = 0x18, // Clear Carry Flag
    IN_CLD = 0xd8, // Clear Decimal Mode
    IN_CLI = 0x58, // Clear Interrupt Disable
    IN_CLV = 0xb8, // Clear Overflow Flag
    IN_SEC = 0x38, // Set Carry Flag
    IN_SED = 0xf8, // Set Decimal Flag
    IN_SEI = 0x78, // Set Interrupt Disable
    IN_NOP = 0xea // No Operation
  };
}
